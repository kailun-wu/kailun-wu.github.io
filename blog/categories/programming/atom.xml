<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | ARTIFACT]]></title>
  <link href="http://kailun-wu.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://kailun-wu.github.io/"/>
  <updated>2015-02-01T12:25:26-05:00</updated>
  <id>http://kailun-wu.github.io/</id>
  <author>
    <name><![CDATA[Kailun Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Minimal LeetCode Setup]]></title>
    <link href="http://kailun-wu.github.io/blog/minimal-leetcode-setup/"/>
    <updated>2014-10-30T20:44:17-04:00</updated>
    <id>http://kailun-wu.github.io/blog/minimal-leetcode-setup</id>
    <content type="html"><![CDATA[<p><a href="https://oj.leetcode.com/problems/">LeetCode Online Judge</a> is a website that hosts algorithm problems and verifies your solutions. Many of my classmates are working hard on it. While far from finishing, I really enjoyed my clean setup.</p>

<p>The way to do it is having two terminal windows opened side by side. On the left, <code>mkdir</code> a new folder to hold all <code>*.java</code> and <code>*.class</code>. Each problem requires exactly one file so I can stay away from any IDE, which is neat. Then in the right terminal window, say, <code>vim MaxProductSubarray.java</code> to start solving a problem:</p>

<ul>
<li>Write the skeleton code.</li>
</ul>


<pre><code class="java MaxProductSubarray.java https://oj.leetcode.com/problems/maximum-product-subarray/ Online judge">import java.util.Arrays;

// https://oj.leetcode.com/problems/maximum-product-subarray/

public class MaxProductSubarray {
  public static void main(String[] args) {
    test(new int[]{5});
    test(new int[]{-1,3});
    test(new int[]{2,3,-2,4});
    test(new int[]{5,2,0,3,9,0});
    test(new int[]{9,2,4,-3,8,-2,-5});
  }     
  public static int maxProduct(int[] A) {
    return 0;
  }
  public static void test(int[] A) {
    System.out.println(Arrays.toString(A) + " -&gt; " + maxProduct(A));
  }
}
</code></pre>

<ul>
<li>Before thinking about solutions, write <em>tests</em> in <code>main()</code>, for I already know the interface of <code>solution()</code>. Tests drive you to cover all the edge cases you&rsquo;d normally overlooked when implementing solutions. Tests inspire me at times.</li>
<li>Solve the problem by hand, code the idea and run tests.</li>
<li>Take down notes and remember handy Java methods.</li>
</ul>


<p>When done, in the left terminal use <code>javac MaxProductSubarray.java</code> to compile and <code>java MaxProductSubarray</code> to execute. <code>⌘ + 1/2</code> will also do the switching between terminal windows.</p>

<p>This setup becomes more efficient when I&rsquo;m better at Vim. Vim has a seriously steep learning curve but <a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/">Learn Vim Progressively</a> (Chinese version <a href="http://coolshell.cn/articles/5426.html">here</a>) made me pretty adept at it.</p>

<hr />

<p style="text-align:center;">Please ignore. Testing iTunes widget only.</p>

<p style="text-align:center;"><iframe src="https://widgets.itunes.apple.com/widget.html?c=jp&brc=FFFFFF&blc=FFFFFF&trc=FFFFFF&tlc=FFFFFF&d=The theme song of the extraordinary Japanese TV series Long Wolf and Cub&t=子連れ狼&m=song&e=song&w=250&h=300&ids=374864529&wt=playlist&partnerId=&affiliate_id=&at=&ct=" frameborder=0 style="overflow-x:hidden;overflow-y:hidden;width:250px;height: 300px;border:0px"></iframe></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mirror of Thought]]></title>
    <link href="http://kailun-wu.github.io/blog/programming-thinking/"/>
    <updated>2014-09-08T00:59:52-04:00</updated>
    <id>http://kailun-wu.github.io/blog/programming-thinking</id>
    <content type="html"><![CDATA[<p>Programming languages are really close to linguistics, for what we made and use will reshape us. It&rsquo;s been believed that German the language contributes to the abundance of philosophers in Germany. <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> Steve Jobs, <a href="https://itunes.apple.com/us/movie/steve-jobs-the-lost-interview/id536749587">back in the 1995</a>:</p>

<blockquote><p>We use them (programming) in the work, but much more importantly, it does nothing to do with using them for anything practical. Have to do with using them to be a mirror of your thought process, to actually learn how to think.</p>

<p>I think everybody in this country should learn how to program a computer, should learn a computer language, because it teaches you how to think. It&rsquo;s like going to law school. I don&rsquo;t think everybody should be a lawyer, but I think going to law school may actually be useful coz it teaches you how to think in a certain way. In the same way the computer programming teaches you in a slightly different way how to think. So I view computer science as a liberal arts. It should be something everybody takes in a year in their life, one of the courses they take is learning how to program.</p></blockquote>

<p>Interesting to see how this correlates with <a href="https://www.youtube.com/watch?v=7Pq-S557XQU">&ldquo;Human needs not apply&rdquo;</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Curiously, ancient Chinese doesn&rsquo;t contain the word &ldquo;is/are/be/etc&rdquo; and “是” is only a recent creation.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: markdown | Artifact]]></title>
  <link href="http://kailun-wu.github.io/blog/categories/markdown/atom.xml" rel="self"/>
  <link href="http://kailun-wu.github.io/"/>
  <updated>2014-08-08T02:06:53-04:00</updated>
  <id>http://kailun-wu.github.io/</id>
  <author>
    <name><![CDATA[Kailun Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[测试代码高亮]]></title>
    <link href="http://kailun-wu.github.io/blog/test-code-highlight/"/>
    <updated>2014-08-08T00:35:23-04:00</updated>
    <id>http://kailun-wu.github.io/blog/test-code-highlight</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s see if code highlight is alright.</p>

<pre><code class="ruby Discover if a number is prime http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/ Source Article">class Fixnum
  def prime?
    ('1' * self) !~ /^1?$|^(11+?)\1+$/
  end
end
</code></pre>

<pre><code class="coffeescript Coffeescript Tricks start:51 mark:52,54-55"># Given an alphabet:
alphabet = 'abcdefghijklmnopqrstuvwxyz'

# Iterate over part of the alphabet:
console.log letter for letter in alphabet[4..8]
</code></pre>

<p>The <code>ColorScraper.java</code> source:</p>

<pre><code class="java ColorScraper.java start:22 mark:24-26">package learner;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

// Fetch the palette data of Dribbble artworks from dribbble.com
// Please change the startId and endId to specify the range of fetching
// Id and palette of every scraped web pages will be seen in the console
// Id and palette of every artwork will be written into a text file
// Thus any web page without artwork content are seen in the console but are omitted in the file

public class ColorScraper {
    public static void main(String[] args) {
        int startId = 1465000;
        int endId   = 1500000;
        try {
            File file = new File("Colors-" + startId + "-" + endId + ".txt");
            BufferedWriter writer = new BufferedWriter(new FileWriter(file));
            for (int i = startId; i &lt;= endId; i++) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    // handle the exception...
                }
                String html = getUrl("https://dribbble.com/shots/" + Integer.toString(i));
                Document doc = Jsoup.parse(html);
                String color = doc.select("li[class=color]").text();
                System.out.println(Integer.toString(i) + " " + color);
                if (color.length() != 0) {
                    writer.write(Integer.toString(i) + " " + color);
                    writer.newLine();
                }
            }
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static String getUrl(String url) {
        URL urlObj = null;
        try {
            urlObj = new URL(url);
        } catch (MalformedURLException e) {
            System.out.println("The url was malformed!");
            return "";
        }
        URLConnection urlCon = null;
        BufferedReader in = null;
        String outputText = "";
        try {
            urlCon = urlObj.openConnection();
            in = new BufferedReader(new InputStreamReader(
                    urlCon.getInputStream()));
            String line = "";
            while ((line = in.readLine()) != null) {
                outputText += line;
            }
            in.close();
        } catch (IOException e) {
            //System.out.println("Empty page(404) or rate limit exceeded");
            return "";
        }
        return outputText;
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>

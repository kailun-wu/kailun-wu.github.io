<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artifact]]></title>
  <link href="http://kailun-wu.github.io/atom.xml" rel="self"/>
  <link href="http://kailun-wu.github.io/"/>
  <updated>2014-08-08T01:24:53-04:00</updated>
  <id>http://kailun-wu.github.io/</id>
  <author>
    <name><![CDATA[Kailun Wu]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Code]]></title>
    <link href="http://kailun-wu.github.io/blog/code/"/>
    <updated>2014-08-08T00:35:23-04:00</updated>
    <id>http://kailun-wu.github.io/blog/code</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s see if code highlight is alright.</p>

<figure class='code'><figcaption><span>Discover if a number is prime</span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Coffeescript Tricks start:51 mark:52,54-55</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Given an alphabet:</span>
</span><span class='line'><span class="nv">alphabet = </span><span class="s">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Iterate over part of the alphabet:</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">letter</span> <span class="k">for</span> <span class="nx">letter</span> <span class="k">in</span> <span class="nx">alphabet</span><span class="p">[</span><span class="mi">4</span><span class="p">..</span><span class="mi">8</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ColorScraper.java</code> source:</p>

<figure class='code'><figcaption><span>ColorScraper.java start:22 mark:24-26</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">learner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jsoup.Jsoup</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jsoup.nodes.Document</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.MalformedURLException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URLConnection</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fetch the palette data of Dribbble artworks from dribbble.com</span>
</span><span class='line'><span class="c1">// Please change the startId and endId to specify the range of fetching</span>
</span><span class='line'><span class="c1">// Id and palette of every scraped web pages will be seen in the console</span>
</span><span class='line'><span class="c1">// Id and palette of every artwork will be written into a text file</span>
</span><span class='line'><span class="c1">// Thus any web page without artwork content are seen in the console but are omitted in the file</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ColorScraper</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">startId</span> <span class="o">=</span> <span class="mi">1465000</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">endId</span>   <span class="o">=</span> <span class="mi">1500000</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;Colors-&quot;</span> <span class="o">+</span> <span class="n">startId</span> <span class="o">+</span> <span class="s">&quot;-&quot;</span> <span class="o">+</span> <span class="n">endId</span> <span class="o">+</span> <span class="s">&quot;.txt&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nf">FileWriter</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">startId</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">endId</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// handle the exception...</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">html</span> <span class="o">=</span> <span class="n">getUrl</span><span class="o">(</span><span class="s">&quot;https://dribbble.com/shots/&quot;</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>                <span class="n">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">Jsoup</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">html</span><span class="o">);</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">color</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="s">&quot;li[class=color]&quot;</span><span class="o">).</span><span class="na">text</span><span class="o">();</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">color</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">color</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">color</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">writer</span><span class="o">.</span><span class="na">newLine</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getUrl</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">URL</span> <span class="n">urlObj</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">urlObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">URL</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;The url was malformed!&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">URLConnection</span> <span class="n">urlCon</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">outputText</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">urlCon</span> <span class="o">=</span> <span class="n">urlObj</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
</span><span class='line'>            <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">urlCon</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">outputText</span> <span class="o">+=</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//System.out.println(&quot;Empty page(404) or rate limit exceeded&quot;);</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">outputText</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;re some text to test <code>Markdown</code>:</p>

<h1>Mou</h1>

<p><img src="http://mouapp.com/Mou_128.png" alt="Mou icon" /></p>

<h2>Overview</h2>

<p><strong>Mou</strong>, the missing Markdown editor for <em>web developers</em>.</p>

<h3>Syntax</h3>

<h4>Strong and Emphasize</h4>

<p><strong>strong</strong> or <strong>strong</strong> ( Cmd + B )</p>

<p><em>emphasize</em> or <em>emphasize</em> ( Cmd + I )</p>

<p><strong>Sometimes I want a lot of text to be bold.
Like, seriously, a <em>LOT</em> of text</strong></p>

<h4>Blockquotes</h4>

<blockquote><p>Right angle brackets &gt; are used for block quotes.</p></blockquote>

<h4>Links and Email</h4>

<p>An email <a href="&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#58;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#46;&#x63;&#111;&#109;">&#101;&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#x40;&#x65;&#x78;&#97;&#109;&#x70;&#108;&#x65;&#46;&#99;&#x6f;&#x6d;</a> link.</p>

<p>Simple inline link <a href="http://chenluois.com">http://chenluois.com</a>, another inline link <a href="http://smallerapp.com">Smaller</a>, one more inline link with title <a href="http://resizesafari.com" title="a Safari extension">Resize</a>.</p>

<p>A <a href="http://mouapp.com" title="Markdown editor on Mac OS X">reference style</a> link. Input id, then anywhere in the doc, define the link with corresponding id:</p>

<p>Titles ( or called tool tips ) in the links are optional.</p>

<h4>Images</h4>

<p>An inline image <img src="http://smallerapp.com/favicon.ico" title="Title here" alt="Smaller icon" />, title is optional.</p>

<p>A <img src="http://resizesafari.com/favicon.ico" title="Title" alt="Resize icon" /> reference style image.</p>

<h4>Inline code and Block code</h4>

<p>Inline code are surround by <code>backtick</code> key. To create a block code:</p>

<pre><code>Indent each line by at least 1 tab, or 4 spaces.
var Mou = exactlyTheAppIwant; 
</code></pre>

<h4>Ordered Lists</h4>

<p>Ordered lists are created using &ldquo;1.&rdquo; + Space:</p>

<ol>
<li>Ordered list item</li>
<li>Ordered list item</li>
<li>Ordered list item</li>
</ol>


<h4>Unordered Lists</h4>

<p>Unordered list are created using &ldquo;*&rdquo; + Space:</p>

<ul>
<li>Unordered list item</li>
<li>Unordered list item</li>
<li>Unordered list item</li>
</ul>


<p>Or using &ldquo;-&rdquo; + Space:</p>

<ul>
<li>Unordered list item</li>
<li>Unordered list item</li>
<li>Unordered list item</li>
</ul>


<h4>Hard Linebreak</h4>

<p>End a line with two or more spaces will create a hard linebreak, called <code>&lt;br /&gt;</code> in HTML. ( Control + Return )<br/>
Above line ended with 2 spaces.</p>

<h4>Horizontal Rules</h4>

<p>Three or more asterisks or dashes:</p>

<hr />

<hr />

<hr />

<h4>Headers</h4>

<p>Setext-style:</p>

<h1>This is H1</h1>

<h2>This is H2</h2>

<p>atx-style:</p>

<h1>This is H1</h1>

<h2>This is H2</h2>

<h3>This is H3</h3>

<h4>This is H4</h4>

<h5>This is H5</h5>

<h6>This is H6</h6>

<h3>Extra Syntax</h3>

<h4>Footnotes</h4>

<p>Footnotes work mostly like reference-style links. A footnote is made of two things: a marker in the text that will become a superscript number; a footnote definition that will be placed in a list of footnotes at the end of the document. A footnote looks like this:</p>

<p>That&rsquo;s some text with a footnote.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h4>Strikethrough</h4>

<p>Wrap with 2 tilde characters:</p>

<p><del>Strikethrough</del></p>

<h4>Fenced Code Blocks</h4>

<p>Start with a line containing 3 or more backticks, and ends with the first line with the same number of backticks:</p>

<figure class='code'><figcaption><span>ColorScraper.java start:22 mark:24-26</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Fenced</span> <span class="n">code</span> <span class="n">blocks</span> <span class="n">are</span> <span class="n">like</span> <span class="n">Stardard</span> <span class="n">Markdown</span><span class="err">’</span><span class="n">s</span> <span class="n">regular</span> <span class="n">code</span>
</span><span class='line'><span class="n">blocks</span><span class="o">,</span> <span class="n">except</span> <span class="n">that</span> <span class="n">they</span><span class="err">’</span><span class="n">re</span> <span class="n">not</span> <span class="n">indented</span> <span class="n">and</span> <span class="n">instead</span> <span class="n">rely</span> <span class="n">on</span>
</span><span class='line'><span class="n">a</span> <span class="n">start</span> <span class="n">and</span> <span class="n">end</span> <span class="n">fence</span> <span class="n">lines</span> <span class="n">to</span> <span class="n">delimit</span> <span class="n">the</span> <span class="n">code</span> <span class="n">block</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Tables</h4>

<p>A simple table looks like this:</p>

<table>
<thead>
<tr>
<th>First Header </th>
<th> Second Header </th>
<th> Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell </td>
<td> Content Cell  </td>
<td> Content Cell</td>
</tr>
<tr>
<td>Content Cell </td>
<td> Content Cell  </td>
<td> Content Cell</td>
</tr>
</tbody>
</table>


<p>If you wish, you can add a leading and tailing pipe to each line of the table:</p>

<table>
<thead>
<tr>
<th> First Header </th>
<th> Second Header </th>
<th> Third Header </th>
</tr>
</thead>
<tbody>
<tr>
<td> Content Cell </td>
<td> Content Cell  </td>
<td> Content Cell </td>
</tr>
<tr>
<td> Content Cell </td>
<td> Content Cell  </td>
<td> Content Cell </td>
</tr>
</tbody>
</table>


<p>Specify alignement for each column by adding colons to separator lines:</p>

<table>
<thead>
<tr>
<th style="text-align:left;">First Header </th>
<th style="text-align:center;"> Second Header </th>
<th style="text-align:right;"> Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">Left         </td>
<td style="text-align:center;"> Center        </td>
<td style="text-align:right;"> Right</td>
</tr>
<tr>
<td style="text-align:left;">Left         </td>
<td style="text-align:center;"> Center        </td>
<td style="text-align:right;"> Right</td>
</tr>
</tbody>
</table>


<h3>Shortcuts</h3>

<h4>View</h4>

<ul>
<li>Toggle live preview: Shift + Cmd + I</li>
<li>Toggle Words Counter: Shift + Cmd + W</li>
<li>Toggle Transparent: Shift + Cmd + T</li>
<li>Toggle Floating: Shift + Cmd + F</li>
<li>Left/Right = 1/1: Cmd + 0</li>
<li>Left/Right = 3/1: Cmd + +</li>
<li>Left/Right = 1/3: Cmd + -</li>
<li>Toggle Writing orientation: Cmd + L</li>
<li>Toggle fullscreen: Control + Cmd + F</li>
</ul>


<h4>Actions</h4>

<ul>
<li>Copy HTML: Option + Cmd + C</li>
<li>Strong: Select text, Cmd + B</li>
<li>Emphasize: Select text, Cmd + I</li>
<li>Inline Code: Select text, Cmd + K</li>
<li>Strikethrough: Select text, Cmd + U</li>
<li>Link: Select text, Control + Shift + L</li>
<li>Image: Select text, Control + Shift + I</li>
<li>Select Word: Control + Option + W</li>
<li>Select Line: Shift + Cmd + L</li>
<li>Select All: Cmd + A</li>
<li>Deselect All: Cmd + D</li>
<li>Convert to Uppercase: Select text, Control + U</li>
<li>Convert to Lowercase: Select text, Control + Shift + U</li>
<li>Convert to Titlecase: Select text, Control + Option + U</li>
<li>Convert to List: Select lines, Control + L</li>
<li>Convert to Blockquote: Select lines, Control + Q</li>
<li>Convert to H1: Cmd + 1</li>
<li>Convert to H2: Cmd + 2</li>
<li>Convert to H3: Cmd + 3</li>
<li>Convert to H4: Cmd + 4</li>
<li>Convert to H5: Cmd + 5</li>
<li>Convert to H6: Cmd + 6</li>
<li>Convert Spaces to Tabs: Control + [</li>
<li>Convert Tabs to Spaces: Control + ]</li>
<li>Insert Current Date: Control + Shift + 1</li>
<li>Insert Current Time: Control + Shift + 2</li>
<li>Insert entity &lt;: Control + Shift + ,</li>
<li>Insert entity >: Control + Shift + .</li>
<li>Insert entity &amp;: Control + Shift + 7</li>
<li>Insert entity Space: Control + Shift + Space</li>
<li>Insert Scriptogr.am Header: Control + Shift + G</li>
<li>Shift Line Left: Select lines, Cmd + [</li>
<li>Shift Line Right: Select lines, Cmd + ]</li>
<li>New Line: Cmd + Return</li>
<li>Comment: Cmd + /</li>
<li>Hard Linebreak: Control + Return</li>
</ul>


<h4>Edit</h4>

<ul>
<li>Auto complete current word: Esc</li>
<li>Find: Cmd + F</li>
<li>Close find bar: Esc</li>
</ul>


<h4>Post</h4>

<ul>
<li>Post on Scriptogr.am: Control + Shift + S</li>
<li>Post on Tumblr: Control + Shift + T</li>
</ul>


<h4>Export</h4>

<ul>
<li>Export HTML: Option + Cmd + E</li>
<li>Export PDF:  Option + Cmd + P</li>
</ul>


<h3>And more?</h3>

<p>Don&rsquo;t forget to check Preferences, lots of useful options are there.</p>

<p>Follow <a href="http://twitter.com/chenluois">@chenluois</a> on Twitter for the latest news.</p>

<p>For feedback, use the menu <code>Help</code> - <code>Send Feedback</code></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>And that&rsquo;s the footnote.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[闻官军收河南河北]]></title>
    <link href="http://kailun-wu.github.io/blog/wen-guan-jun/"/>
    <updated>2014-08-07T01:17:24-04:00</updated>
    <id>http://kailun-wu.github.io/blog/wen-guan-jun</id>
    <content type="html"><![CDATA[<p>剑外忽传收蓟北，初闻涕泪满衣裳。</p>

<p>却看妻子愁何在，漫卷诗书喜欲狂。</p>

<p>白日放歌须纵酒，青春作伴好还乡。</p>

<p>即从巴峡穿巫峡，便下襄阳向洛阳。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[將進酒]]></title>
    <link href="http://kailun-wu.github.io/blog/jiang-jin-jiu/"/>
    <updated>2014-08-05T01:17:24-04:00</updated>
    <id>http://kailun-wu.github.io/blog/jiang-jin-jiu</id>
    <content type="html"><![CDATA[<p>君不見黃河之水天上來，奔流到海不復還。</p>

<p>君不見高堂明鏡悲白髮，朝如青絲暮成雪。</p>

<p>人生得意須盡歡，莫使金樽空對月。</p>

<p>天生我材必有用，千金散盡還復來。</p>

<p>烹羊宰牛且爲樂，會須一飲三百杯。</p>

<p>岑夫子，丹丘生。將進酒，杯莫停。</p>

<p>與君歌一曲，請君爲我傾耳聽。</p>

<p>鐘鼓饌玉不足貴，但願長醉不復醒。</p>

<p>古來聖賢皆寂寞，惟有飲者留其名。</p>

<p>陳王昔時宴平樂，斗酒十千恣讙謔。</p>

<p>主人何為言少錢？徑須沽取對君酌。</p>

<p>五花馬，千金裘。呼兒將出換美酒，與爾同銷萬古愁。</p>
]]></content>
  </entry>
  
</feed>

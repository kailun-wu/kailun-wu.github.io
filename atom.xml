<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artifact]]></title>
  <link href="http://kailun-wu.github.io/atom.xml" rel="self"/>
  <link href="http://kailun-wu.github.io/"/>
  <updated>2014-08-25T02:33:18-04:00</updated>
  <id>http://kailun-wu.github.io/</id>
  <author>
    <name><![CDATA[Kailun Wu]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Thoughts on Mechanical Keyboard]]></title>
    <link href="http://kailun-wu.github.io/blog/thoughts-on-mechanical-keyboard/"/>
    <updated>2014-08-25T01:48:57-04:00</updated>
    <id>http://kailun-wu.github.io/blog/thoughts-on-mechanical-keyboard</id>
    <content type="html"><![CDATA[<p>I&rsquo;m fond of <a href="http://www.douban.com/photos/album/134718709/">mechanical keyboards</a> now, which is a surprise to people including myself. To most, those keyboards are relics from the 80s. Everyone now uses a laptop with built-in chiclet keys and a phone with touch keyboard. No one need a dedicated one, period.</p>

<p>But it feels so good. Seldom do I see a product perfectly balancing productivity, design, build quality and personality. Dieter Rams&#8217; 10 principles of good design totally applies here.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> In a very sensible way it&rsquo;s superior to laptop keyboard in every aspect except in size. After all, keyboards have come a long way and the manufacturing process are matured. If &ldquo;personal computer is like bicycle for the mind&rdquo;<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, then mechanical keyboard makes better such bicycle.</p>

<p>But is mechanical keyboard barely surviving? Is it like nascent personal computers in the 70s, or is it like DSLR cameras today? I&rsquo;ve been thinking about these questions and how it&rsquo;s possible to popularize mechanical keyboards. Without any market research data, I can only draw conclusion from observation.</p>

<p>Personal computing in the 70s are used by pros and has a high price. There&rsquo;re booming brands but more PCs are DIY-ed than integrated. You can&rsquo;t buy what you want and may not realize what you what. Mechanical keyboards today are precisely the same.</p>

<p>Cameras today are being replaced by the best cameras - the ones on your phone with you all day. Granted, phone cameras are <a href="http://www.theverge.com/2014/8/22/6055591/iphone-vs-pro-camera">shittier</a> and professional cameras are still going to be around. But the fact that most people are served by smartphones will erase the need of consumer cameras. Mechanical keyboards today are precisely the same.</p>

<p>My tendency is that keyboard are like cameras. Usually a product would go through different phases in their life. PCs and cameras has gone through all of them: enthusiast phase, professional phase and consumer phase. So does keyboard. Ideally the user base would swell with consumers. But before it becomes mass market the desktop computers themselves were largely replaced by laptops, rendering the consumer portion of mechanical keyboards miniscule. Like game console, which became more advanced and pricier historically and is ceding low end to PCs and smartphones, mechanical keyboard continues to be refined.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> But it lacks stellar new features and don&rsquo;t have popular brands like Beats. So popularizing mechanical keyboard depends on the total user base of personal computing, the percentage of enthusiasts and professionals in that user base, and innovation in design/marketing. Beats enjoys health profits from headsets and Sony sells PlayStation faster than they could understand. Likely we can see the same happened to mechanical keyboards as more people on Earth have access to their first computing devices and more people discover the desire for better experience.</p>

<p>Show people the story of how mechanical keyboard can bring them aesthetics, productivity, health, individuality and creativity. Let them hit keycaps in person. Game junkies, software engineers and designers would be on board but bold design is needed to win average consumers. WASD Keyboards has brought us real keycap customization and HHKB/KBC sells minimalism. Radical ideas and parts discussed on GeekHack can also be adopted.</p>

<p>People have jobs to be done and if some company can provide a radical solution and fix the broken status of mechanical keyboard, everyone is doing better.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.douban.com/note/77176672/">Said Rams</a>: &ldquo;Good design is innovative. Good design makes a product useful. Good design is aesthetic. Good design is unobtrusive. Good design makes a product understandable. Good design is honest. Good design is long-lasting. Good design is environmentally-friendly. Good design is as little design as possible. Good design is thorough, down to the last detail.&rdquo; <a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="https://www.youtube.com/watch?v=ob_GX50Za6c">Said Jobs</a>, which resonates with me because I appreciate the idea of technology augmenting human, other than <a href="http://www.theverge.com/2014/6/24/5835708/google-x-labs-artificial-intelligence-elon-musk-terminator">mimicking</a> human.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>On Ben Thompson&rsquo;s <a href="http://stratechery.com/2014/apple-tv-might-disrupt-microsoft-sony/">Stratechery</a>, a daily read blog with great insights.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试代码高亮]]></title>
    <link href="http://kailun-wu.github.io/blog/test-code-highlight/"/>
    <updated>2014-08-08T00:35:23-04:00</updated>
    <id>http://kailun-wu.github.io/blog/test-code-highlight</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s see if code highlight is alright.</p>

<figure class='code'><figcaption><span>Discover if a number is prime</span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Coffeescript Tricks start:51 mark:52,54-55</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Given an alphabet:</span>
</span><span class='line'><span class="nv">alphabet = </span><span class="s">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Iterate over part of the alphabet:</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">letter</span> <span class="k">for</span> <span class="nx">letter</span> <span class="k">in</span> <span class="nx">alphabet</span><span class="p">[</span><span class="mi">4</span><span class="p">..</span><span class="mi">8</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ColorScraper.java</code> source:</p>

<figure class='code'><figcaption><span>ColorScraper.java start:22 mark:24-26</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">learner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jsoup.Jsoup</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jsoup.nodes.Document</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.MalformedURLException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URLConnection</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fetch the palette data of Dribbble artworks from dribbble.com</span>
</span><span class='line'><span class="c1">// Please change the startId and endId to specify the range of fetching</span>
</span><span class='line'><span class="c1">// Id and palette of every scraped web pages will be seen in the console</span>
</span><span class='line'><span class="c1">// Id and palette of every artwork will be written into a text file</span>
</span><span class='line'><span class="c1">// Thus any web page without artwork content are seen in the console but are omitted in the file</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ColorScraper</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">startId</span> <span class="o">=</span> <span class="mi">1465000</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">endId</span>   <span class="o">=</span> <span class="mi">1500000</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">File</span><span class="o">(</span><span class="s">&quot;Colors-&quot;</span> <span class="o">+</span> <span class="n">startId</span> <span class="o">+</span> <span class="s">&quot;-&quot;</span> <span class="o">+</span> <span class="n">endId</span> <span class="o">+</span> <span class="s">&quot;.txt&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nf">FileWriter</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">startId</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">endId</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// handle the exception...</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">html</span> <span class="o">=</span> <span class="n">getUrl</span><span class="o">(</span><span class="s">&quot;https://dribbble.com/shots/&quot;</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>                <span class="n">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="n">Jsoup</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">html</span><span class="o">);</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">color</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="s">&quot;li[class=color]&quot;</span><span class="o">).</span><span class="na">text</span><span class="o">();</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">color</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">color</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">color</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">writer</span><span class="o">.</span><span class="na">newLine</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getUrl</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">URL</span> <span class="n">urlObj</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">urlObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">URL</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;The url was malformed!&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">URLConnection</span> <span class="n">urlCon</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">outputText</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">urlCon</span> <span class="o">=</span> <span class="n">urlObj</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
</span><span class='line'>            <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">urlCon</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">outputText</span> <span class="o">+=</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//System.out.println(&quot;Empty page(404) or rate limit exceeded&quot;);</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">outputText</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[闻官军收河南河北]]></title>
    <link href="http://kailun-wu.github.io/blog/wen-guan-jun/"/>
    <updated>2014-08-07T01:17:24-04:00</updated>
    <id>http://kailun-wu.github.io/blog/wen-guan-jun</id>
    <content type="html"><![CDATA[<p>剑外忽传收蓟北，初闻涕泪满衣裳。</p>

<p>却看妻子愁何在，漫卷诗书喜欲狂。</p>

<p>白日放歌须纵酒，青春作伴好还乡。</p>

<p>即从巴峡穿巫峡，便下襄阳向洛阳。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[將進酒]]></title>
    <link href="http://kailun-wu.github.io/blog/jiang-jin-jiu/"/>
    <updated>2014-08-05T01:17:24-04:00</updated>
    <id>http://kailun-wu.github.io/blog/jiang-jin-jiu</id>
    <content type="html"><![CDATA[<p>君不見黃河之水天上來，奔流到海不復還。</p>

<p>君不見高堂明鏡悲白髮，朝如青絲暮成雪。</p>

<p>人生得意須盡歡，莫使金樽空對月。</p>

<p>天生我材必有用，千金散盡還復來。</p>

<p>烹羊宰牛且爲樂，會須一飲三百杯。</p>

<p>岑夫子，丹丘生。將進酒，杯莫停。</p>

<p>與君歌一曲，請君爲我傾耳聽。</p>

<p>鐘鼓饌玉不足貴，但願長醉不復醒。</p>

<p>古來聖賢皆寂寞，惟有飲者留其名。</p>

<p>陳王昔時宴平樂，斗酒十千恣讙謔。</p>

<p>主人何為言少錢？徑須沽取對君酌。</p>

<p>五花馬，千金裘。呼兒將出換美酒，與爾同銷萬古愁。</p>
]]></content>
  </entry>
  
</feed>
